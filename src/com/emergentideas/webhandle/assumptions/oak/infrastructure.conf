# this will integrate atomizers that are able to transform configuration atoms
# into objects that have details parsed from the type and value
com.emergentideas.webhandle.bootstrap.AtomizerIntegrator

# adds an atomizer which which transform basic configuration atoms into atoms
# which have a focus (the class name) and a set of properties which are the
# configuration parameters
com.emergentideas.webhandle.bootstrap.ClassDefinitionAtomizer

# atomizers for other atom types
com.emergentideas.webhandle.bootstrap.ResourceSinkAtomizer

# this will auto wire any bean created from the services
com.emergentideas.webhandle.assumptions.oak.AutoWireIntegrator

# this will add any named or typed bean to be a service
com.emergentideas.webhandle.assumptions.oak.ServiceIntegrator

# this will add any configuration files referenced by file name
com.emergentideas.webhandle.bootstrap.IncludeFileConfigurationCreator

# this is an EntityManager that can be injected into any service.  It won't work
# until db init is called.
com.emergentideas.webhandle.db.ProxiedThreadLocalEntityManager

# this will call any method on a bean with an Init annotation
com.emergentideas.webhandle.assumptions.oak.InitIntegrator

# this integrates all the other classes into HandleCaller
com.emergentideas.webhandle.assumptions.oak.ResponseLifecycleIntegrator

# allows using properties files to wire values
com.emergentideas.webhandle.bootstrap.WireProperties

# load the request term cache
com.emergentideas.webhandle.assumptions.oak.RequestTermCache

# this loads the object that will handle requests.  Everything else will be 
# integrated into it or, like the web parameter marshal configuration from
# below, referenced by name.
com.emergentideas.webhandle.assumptions.oak.HandleCaller

# this loads a handler investigator that will let us know what method to call
# in response to a request. It is also an integrator, detecting new beans
# as they are loaded and including them in the handler infrastructure
com.emergentideas.webhandle.handlers.HandleAnnotationHandlerInvestigator

# loads the expression factory which will interpret any expression as a jexl expression
com.emergentideas.webhandle.templates.JexlExpressionFactory

# adds the json serialization classes
com.emergentideas.webhandle.json.AnnotationDrivenJSONSerializer
com.emergentideas.webhandle.json.JSONSerializerIntegrator

com.emergentideas.webhandle.json.BooleanSerializer
com.emergentideas.webhandle.json.CalendarSerializer
com.emergentideas.webhandle.json.DateSerializer
com.emergentideas.webhandle.json.JavaObjectSerializer
com.emergentideas.webhandle.json.NumberSerializer
com.emergentideas.webhandle.json.StringSerializer
com.emergentideas.webhandle.json.ByteArraySerializer


# transforms the output into html
com.emergentideas.webhandle.investigators.TemplateOutputTransformersInvestigator

# load the web parameter marshal and its integrators
class-path-include->com/emergentideas/webhandle/webParameterMarshal.conf

# load the composite template source
com.emergentideas.webhandle.assumptions.oak.CompositeTemplateSource

# load the integrator that will roll all other template sources into the composite
com.emergentideas.webhandle.assumptions.oak.CompositeTemplateSourcesIntegrator

# load a library for templates that are classes implementing the TemplateInstance interface
com.emergentideas.webhandle.assumptions.oak.LibraryTemplateSource

# load the integrator which will add objects with the @TemplateDef annotation to the library
com.emergentideas.webhandle.assumptions.oak.TemplateInstanceIntegrator

# load the creators which will create a template source from a directory or classpath containing tripartate templates
com.emergentideas.webhandle.assumptions.oak.TripartateDirectoryTemplateSourceCreator
com.emergentideas.webhandle.assumptions.oak.TripartateClasspathTemplateSourceCreator

# creates a configuration for the db that can be added to as classes are integrated
# by itself, this won't ever try to create a db connection
com.emergentideas.webhandle.db.DbIntegrator
com.emergentideas.webhandle.db.DbInitIntegrator
com.emergentideas.webhandle.db.DbConfiguration


com.emergentideas.webhandle.db.DbObjectTransformer

# load the not null investigator and transformer which will create default objects
com.emergentideas.webhandle.investigators.NotNullTransformerInvestigator
com.emergentideas.webhandle.transformers.NotNullValueTransformer

# load the command investigator and transformer
com.emergentideas.webhandle.transformers.CommandValueTransformer
com.emergentideas.webhandle.transformers.InjectValueTransformer
com.emergentideas.webhandle.investigators.CommandTransformerInvestigator

# allows public-resource configuration locations to be loaded as a url handler
com.emergentideas.webhandle.files.PublicResourcesIntegrator

# add the templates for listing the contents of a directory
template-classpath->com/emergentideas/webhandle/files/templates

# starts a transaction for this thread and will commit the transaction if no errors occur
# and will rollback the transaction if errors do occur.
class-path-include->com/emergentideas/webhandle/db/web.conf

# sets up the segmented output and messages objects for use during the request
com.emergentideas.webhandle.assumptions.oak.RequestObjectSetup

# adds a generic exception handler which will log the error and display an error page
com.emergentideas.webhandle.assumptions.oak.ExceptionHandle

# Java based templates
com.emergentideas.webhandle.templates.instances.EscapeHTML
com.emergentideas.webhandle.templates.instances.DoubleUnderscore

